@page "/usermanager"
@inherits UsermanagerBlazor
@inject DialogService DialogService
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization


<AuthorizeView Roles="Admin">
<Authorized>
<h3>Create Users</h3>


<RadzenCard class="rz-my-6">
	<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" Wrap="FlexWrap.NoWrap">
		<RadzenStack Orientation="Orientation.Vertical" Gap="4px">
			<label> Username</label>
			<InputText @bind-Value="username" DisplayName="userName"> </InputText>
		</RadzenStack>
		<RadzenStack Orientation="Orientation.Vertical" Gap="4px">
			<label> Password </label>
			<InputText @bind-Value="password" type="password" DisplayName="password"></InputText>
		</RadzenStack>
		<RadzenStack Orientation="Orientation.Vertical" Gap="4px">
					<label> Email </label>
					<InputText @bind-Value="email" DisplayName="email"></InputText>
		</RadzenStack>

			<RadzenStack Orientation="Orientation.Vertical" Gap="4px">
			<label> Role</label>
			<InputText @bind-Value="role"></InputText>
		</RadzenStack>
		<RadzenStack Orientation="Orientation.Vertical"  Gap="4px" >
			<RadzenButton ButtonStyle="ButtonStyle.Primary" Style="margin-top: 25px;" Icon="add_circle" Click="CreateUser" Text="Create User"></RadzenButton>
		</RadzenStack>
	</RadzenStack>
</RadzenCard>

<!--
<div>

	<div class="col-md">

		<label> Username</label>
		<InputText @bind-Value="username" DisplayName="userName"> </InputText>
	</div>
	<div class="col-md">
		<label> Password </label>
		<InputText @bind-Value="password" type="password" DisplayName="Cron"></InputText>
	</div>
	<div class="col-md">
		<label> Role</label>
		<InputText @bind-Value="role"></InputText>
	</div>
	<div class="col-md-2">
		<button type="button" class="btn btn-primary" @onclick="CreateUser">Create User</button>
	</div>
</div>
-->

<RadzenButton ButtonStyle="ButtonStyle.Light" Style="margin-bottom: 10px; margin-top: 20px " Icon="cached" Text="Refresh List" Click="RefreshList"> </RadzenButton>



<table class="table table-bordered table-hover">

	<thead>
		<tr>
			<th scope="col">Name</th>
			<th scope="col">Role</th>
			<th scope="col">Email</th>
			<th scope="col">Actions</th>
		</tr>
	</thead>
	<tbody>

		@if (userlist != null)
		{
			@foreach (var user in userlist)
			{
				<tr>
					<td>@user.username</td>
					<td>@user.Role</td>
                    <td>@user.email</td>
					<td>

						<RadzenButton Text="Delete" Icon="delete" ButtonStyle="ButtonStyle.Secondary"
									  Click=@(async args =>
							  {
							  bool? confirmed = await DialogService.Confirm("Are you sure?", "Delete User",
							  new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });
							  if (confirmed == true)
							  {
								await Delete(user.username);
								DialogService.Close();
							  }
							  else DialogService.Close();
							  }) />


						<RadzenButton Text="Reset Password" ButtonStyle="ButtonStyle.Primary" Click ="()=>ShowInlineDialog(user.username)"></RadzenButton>
						<!--<button type="button" class="btn btn-danger" @onclick="() => Delete(user.username)">Delete</button>-->
						<!--<button type="button" class="btn btn-secondary" data-toggle="modal" data-target="#exampleModalCenter">Change Password</button>-->
						
					</td>
				</tr>
			}
		}
		else
		{
			<tr><td colspan="6">Loading users</td></tr>
		}

	</tbody>
</table>
	</Authorized>

	<NotAuthorized>
		No access 
	</NotAuthorized>
</AuthorizeView>

@code {


	
	async Task ShowInlineDialog(string username)
	{
		var result = await DialogService.OpenAsync("Password Change", ds =>
	@<RadzenStack Gap="1.5rem">
		<RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
		<p>Change Password</p>
			<RadzenStack Orientation="Orientation.Horizontal">
				<RadzenPassword  @bind-Value="password"></RadzenPassword>
				<RadzenButton Text="Ok" Click="async () => { await ChangePassword(username, password); ds.Close(true); }" Style="width: 80px;" />
				<RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
			</RadzenStack>

		</RadzenStack>
	</RadzenStack>);
	}

	
}
